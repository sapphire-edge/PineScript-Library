//@version=5
// Â© sapphire_edge 

// # ========================================================================= #
// #                  
// #        _____                   __    _              ______    __         
// #      / ___/____ _____  ____  / /_  (_)_______     / ____/___/ /___ ____ 
// #      \__ \/ __ `/ __ \/ __ \/ __ \/ / ___/ _ \   / __/ / __  / __ `/ _ \
// #     ___/ / /_/ / /_/ / /_/ / / / / / /  /  __/  / /___/ /_/ / /_/ /  __/
// #    /____/\__,_/ .___/ .___/_/ /_/_/_/   \___/  /_____/\__,_/\__, /\___/ 
// #              /_/   /_/                                     /____/       
// #                                      
// # ========================================================================= #

strategy(title="Sapphire RSI Divergence", shorttitle="[Sapphire] RSI Divergence Strategy", overlay=true, initial_capital=50000, currency=currency.USD, default_qty_value=2, pyramiding=2, commission_type=strategy.commission.cash_per_contract, commission_value=2.36)

// # ========================================================================= #
// #                       // Settings Menu //
// # ========================================================================= #

// === RSI Divergence Inputs ===
groupRSI = "RSI Settings"
len = input.int(title='RSI Period', minval=1, defval=9, group=groupRSI)
src = input(title='RSI Source', defval=close, group=groupRSI)
lbR = input.int(title='Pivot Lookback Right', defval=3, group=groupRSI)
lbL = input.int(title='Pivot Lookback Left', defval=1, group=groupRSI)
takeProfitRSILevel = input.int(title='Take Profit at RSI Level', minval=70, defval=80, group=groupRSI)

rangeUpper = input.int(title='Max of Lookback Range', defval=60, group=groupRSI)
rangeLower = input.int(title='Min of Lookback Range', defval=5, group=groupRSI)

plotBull = input.bool(title='Plot Bullish', defval=true, group=groupRSI)
plotHiddenBull = input.bool(title='Plot Hidden Bullish', defval=true, group=groupRSI)
plotBear = input.bool(title='Plot Bearish', defval=true, group=groupRSI)
plotHiddenBear = input.bool(title='Plot Hidden Bearish', defval=false, group=groupRSI)

// === Trade Management Inputs ===
groupTradeManagement = "Trade Management"
useProfitPerc = input.bool(false, title="Enable Profit Target", group=groupTradeManagement)
takeProfitPerc = input.float(1.0, title="Take Profit (%)", step=0.1, group=groupTradeManagement)
useStopLossPerc = input.bool(false, title="Enable Stop Loss", group=groupTradeManagement)
stopLossPerc = input.float(1.0, title="Stop Loss (%)", step=0.1, group=groupTradeManagement)

// === ATR-Based Stop Loss Inputs ===
groupATR = "ATR-Based Stop Loss"
enableATR = input.bool(false, title="Enable ATR-Based Stop Loss", group=groupATR)
atrLength = input.int(14, title='ATR Length', defval=14, group=groupATR)
atrMultiplier = input.float(3.5, title='ATR Multiplier', defval=3.5, group=groupATR)

// === Time Filter Inputs ===
groupTimeOfDayFilter = "Time of Day Filter"
useTimeFilter = input.bool(false, title="Enable Time Filter", group=groupTimeOfDayFilter)
startHour = input.int(0, title="Start Hour (24-hour format)", minval=0, maxval=23, group=groupTimeOfDayFilter)
startMinute = input.int(0, title="Start Minute", minval=0, maxval=59, group=groupTimeOfDayFilter)
endHour = input.int(23, title="End Hour (24-hour format)", minval=0, maxval=23, group=groupTimeOfDayFilter)
endMinute = input.int(45, title="End Minute", minval=0, maxval=59, group=groupTimeOfDayFilter)

// === Date Range Filter Inputs ===
G_FILTER = "Date Range Filter"
i_StartTime = input.time(timestamp("01 Jan 2000 13:30 +0000"), "Start Filter", group=G_FILTER, tooltip="Start date & time to begin searching for setups")
i_EndTime = input.time(timestamp("1 Jan 2099 19:30 +0000"), "End Filter", group=G_FILTER, tooltip="End date & time to stop searching for setups")

// === Time and Date Filters ===
isWithinTradingWindow(startHour, startMinute, endHour, endMinute) =>
    nyTime = timestamp("America/New_York", year, month, dayofmonth, hour, minute)
    nyHour = hour(nyTime)
    nyMinute = minute(nyTime)
    timeInMinutes = nyHour * 60 + nyMinute
    startInMinutes = startHour * 60 + startMinute
    endInMinutes = endHour * 60 + endMinute
    timeInMinutes >= startInMinutes and timeInMinutes <= endInMinutes

// # ========================================================================= #
// #                       // Calculations //                                  #
// # ========================================================================= #

// === ATR Stop Loss ===
atr_value = ta.atr(atrLength)
atr_stop_loss = atrMultiplier * atr_value

// === ATM Levels ===
useStopLoss = enableATR ? atr_stop_loss : close * stopLossPerc / 100
useTakeProfit = close * takeProfitPerc / 100

// === RSI Calculation ===
osc = ta.rsi(src, len)

// === Pivot Logic ===
plFound = not na(ta.pivotlow(osc, lbL, lbR))
phFound = not na(ta.pivothigh(osc, lbL, lbR))

_inRange(cond) =>
    bars = ta.barssince(cond)
    rangeLower <= bars and bars <= rangeUpper

// # ========================================================================= #
// #                       // Signal Logic //                                  #
// # ========================================================================= #

// === Boolean Logic ===
timeCondition = useTimeFilter ? isWithinTradingWindow(startHour, startMinute, endHour, endMinute) : true
dateRangeCondition = (time >= i_StartTime and time <= i_EndTime)

// === Bullish Divergences ===
oscHL = osc[lbR] > ta.valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])
priceLL = low[lbR] < ta.valuewhen(plFound, low[lbR], 1)
bullCond = plotBull and priceLL and oscHL and plFound

oscLL = osc[lbR] < ta.valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])
priceHL = low[lbR] > ta.valuewhen(plFound, low[lbR], 1)
hiddenBullCond = plotHiddenBull and priceHL and oscLL and plFound

// === Bearish Divergences ===
oscLH = osc[lbR] < ta.valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])
priceHH = high[lbR] > ta.valuewhen(phFound, high[lbR], 1)
bearCond = plotBear and priceHH and oscLH and phFound

oscHH = osc[lbR] > ta.valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])
priceLH = high[lbR] < ta.valuewhen(phFound, high[lbR], 1)
hiddenBearCond = plotHiddenBear and priceLH and oscHH and phFound

// === Strategy Entries and Exits ===
longCondition = (bullCond or hiddenBullCond) and timeCondition and dateRangeCondition
shortCondition = (bearCond or hiddenBearCond) and timeCondition and dateRangeCondition
longCloseCondition = ta.crossover(osc, takeProfitRSILevel) or bearCond

// # ========================================================================= #
// #                         // Strategy Management //
// # ========================================================================= #

strategy.entry(id="RSIDivLE", direction=strategy.long, when=longCondition)
strategy.entry(id="RSIDivSE", direction=strategy.short, when=shortCondition)

strategy.close(id="RSIDivLE", when=longCloseCondition)
strategy.close(id="RSIDivSE", when=ta.crossunder(osc, 30))

// # ========================================================================= #
// #                         // Alerts //                                       #
// # ========================================================================= #

// === Alert Conditions ===
alertcondition(bullCond, title="Regular Bullish Divergence", message="Regular Bullish Divergence detected.")
alertcondition(hiddenBullCond, title="Hidden Bullish Divergence", message="Hidden Bullish Divergence detected.")
alertcondition(bearCond, title="Regular Bearish Divergence", message="Regular Bearish Divergence detected.")
alertcondition(hiddenBearCond, title="Hidden Bearish Divergence", message="Hidden Bearish Divergence detected.")
alertcondition(longCondition, title="Long Entry", message="Long entry condition met.")
alertcondition(shortCondition, title="Short Entry", message="Short entry condition met.")
alertcondition(longCloseCondition, title="Long Exit", message="Long exit condition met.")
alertcondition(ta.crossunder(osc, 30), title="Short Exit", message="Short exit condition met.")

// # ========================================================================= #
// #                         // Plots and Charts //
// # ========================================================================= #

// Colors
bearColor         = color.rgb(21, 146, 159)
bullColor         = color.rgb(7, 130, 85)
hiddenBullColor   = color.new(color.green, 80)
hiddenBearColor   = color.new(color.red, 80)
textColor         = color.white
noneColor         = color.new(color.white, 100)

// Plot RSI Line
plot(osc, title='RSI', linewidth=2, color=color.blue)

// Plot Overbought and Oversold Levels
hline(70, title='Overbought Level', color=color.red, linestyle=hline.style_dotted)
hline(30, title='Oversold Level',   color=color.green, linestyle=hline.style_dotted)
hline(50, title='Middle Line',      color=color.gray, linestyle=hline.style_dashed)

// Fill Overbought and Oversold Zones
fill(hline(70), hline(30), color=color.new(color.purple, 90), title="RSI Zones")

// Plot Bullish Divergences
plotshape(bullCond ? osc[lbR]       : na, title="Regular Bullish Divergence", location=location.absolute, color=color.new(bullColor, 0), style=shape.triangleup, size=size.small)
plotshape(hiddenBullCond ? osc[lbR] : na, title="Hidden Bullish Divergence", location=location.absolute, color=color.new(hiddenBullColor, 0), style=shape.triangleup, size=size.small)

// Plot Bearish Divergences
plotshape(bearCond ? osc[lbR]       : na, title="Regular Bearish Divergence", location=location.absolute, color=color.new(bearColor, 0), style=shape.triangledown, size=size.small)
plotshape(hiddenBearCond ? osc[lbR] : na, title="Hidden Bearish Divergence", location=location.absolute, color=color.new(hiddenBearColor, 0), style=shape.triangledown, size=size.small)

